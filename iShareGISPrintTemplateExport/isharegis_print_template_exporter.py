# -*- coding: utf-8 -*-
"""
/***************************************************************************
 iShareGISPrintTemplateExporter
                                 A QGIS plugin
 Exports a QGIS Print Composer template to iShare GIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-04-20
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Astun Technology
        email                : qgisdev@astuntechnology.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import Qgis as QGis
from qgis.PyQt import QtNetwork
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtCore import QUrl, QByteArray
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QFileDialog, QAction
from qgis.PyQt.QtNetwork import QNetworkRequest, QNetworkReply

from qgis.core import QgsApplication, QgsMessageLog, QgsNetworkAccessManager
#from qgis.gui import QgsMessageBar


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .isharegis_print_template_exporter_dialog import iShareGISPrintTemplateExporterDialog

from os import listdir
from os.path import isfile, join
import os.path, unicodedata, re, base64, traceback, html
from shutil import rmtree, copyfile


class iShareGISPrintTemplateExporter:
    """QGIS Plugin Implementation."""

    nam = None
    save_directory = None
    save_template = None

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        if QSettings().value('locale/userLocale'):
            locale = QSettings().value('locale/userLocale')[0:2]
            locale_path = os.path.join(
                self.plugin_dir,
                'i18n',
                'iShareGISPrintTemplateExporter_{}.qm'.format(locale))

            if os.path.exists(locale_path):
                self.translator = QTranslator()
                self.translator.load(locale_path)
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&iShareGIS Print Template Exporter')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('iShareGISPrintTemplateExporter', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        # Create the dialog (after translation) and keep reference
        self.dlg = iShareGISPrintTemplateExporterDialog()

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/isharegis_print_template_exporter/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Export print template for iShareGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&iShareGIS Print Template Exporter'),
                action)
            self.iface.removeToolBarIcon(action)


    def send_request(self, url, template, directory, payload):
        """Sends the request to the server"""



        self.save_directory = directory
        self.save_template = template

        req = QNetworkRequest(QUrl(url))

        # set request headers
        req.setHeader(QNetworkRequest.ContentTypeHeader, "application/xml")
        req.setRawHeader(self.convert_to_QByteArray("x-template-name"), self.convert_to_QByteArray(template))
        req.setRawHeader(b"Authorization", b"Basic " + base64.b64encode(f"{self.dlg.txtAstunServicesUsername.text()}:{self.dlg.txtAstunServicesPassword.text()}".encode()))

        self.nam = QtNetwork.QNetworkAccessManager()
        self.nam.finished.connect(self.request_finished)
        data = self.convert_to_QByteArray(payload)

        self.add_log_entry(f"URL: {url}")
        self.add_log_entry(f"Template: {template}")
        self.add_log_entry(f"Directory: {directory}")
        self.add_log_entry(f"Payload:\r\n{payload}")

        self.add_log_entry("save_template: {0} [{1}]".format(self.save_template, type(self.save_template).__name__))
        self.add_log_entry("Sending request")
        self.nam.post(req, data)

    def request_finished(self, reply):
        """Handles the response from the server"""
        self.add_log_entry("Received response")
        if reply is None:
            self.add_log_entry("Response from the server is empty", level=QGis.Critical)
            return

        self.nam.finished.disconnect(self.request_finished)
        sc = reply.attribute(QNetworkRequest.HttpStatusCodeAttribute)
        if sc == 200:
            ba = reply.readAll()
            bas = str(ba.data(), encoding='utf-8')

            safe_filename = self.create_filename(os.path.basename(os.path.splitext(self.save_template)[0]))
            filepath = os.path.join(self.save_directory, '{0}.html'.format(safe_filename))
            imagepath = os.path.join(self.save_directory, '{0}_images'.format(safe_filename))

            self.add_log_entry("safe_filename: {0}".format(safe_filename))
            self.add_log_entry("imagepath: {0}".format(imagepath))
            self.add_log_entry("filepath: {0}".format(filepath))

            # remove the template and images directory if they exist
            if os.path.isfile(filepath):
                os.remove(filepath)
            rmtree(imagepath, ignore_errors=True)

            re_exp = r"<img src=[\"']([^\"']*)"
            images = re.findall(re_exp, bas)
            image_error = False
            if len(images) > 0:
                self.add_log_entry("Found {0} image(s)".format(len(images)))

                if not os.path.exists(imagepath):
                    self.add_log_entry("Export image directory already exists, reusing")
                    os.mkdir(imagepath)

                for image in images:
                    self.add_log_entry('Found image "{0}"'.format(image))
                    dest_filename = os.path.join(imagepath, os.path.basename(image))
                    relative_image_path = "{0}_images/{1}".format(safe_filename, os.path.basename(image))
                    self.add_log_entry('Relative image path set to "{0}"'.format(relative_image_path))
                    bas = bas.replace(image, relative_image_path)

                    try:
                        copyfile(image, dest_filename)
                    except Exception as e:
                        image_error = True
                        self.add_log_entry('Unable to copy file: "{0}" to {1}\r\n{2}'.format(image, dest_filename, e), level=QGis.Critical)

            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(bas)

                self.add_log_entry("Saved template to '{0}'".format(self.save_directory))

                if not image_error:
                    self.show_message("Template successfully converted", log=True)
                else:
                    self.show_message("Template saved, but at least one image not found", QGis.Warning, log=True)

            except IOError as e:
                self.show_message("Unable to save template to selected directory", level=QGis.Critical, log=True, exception=e)
        else:
            self.show_message('An error occurred while converting the template', level=QGis.Critical, log=True)
            self.add_log_entry(f"Error: Status code={sc}")
            self.add_log_entry(reply.content().data().decode('utf-8'))
        reply.deleteLater()

    def convert_to_QByteArray(self, value):
        self.add_log_entry(f"Converting to QByteArray: {value}")
        ba = QByteArray()
        ba.append(value)
        return ba

    def add_log_entry(self, message, level=QGis.Info):
        """Adds a log entry to the QGIS log"""
        QgsMessageLog.logMessage(message, "iShareGIS Template Export", level=level)

    def show_message(self, message, level=QGis.Info, log=False, exception=None):
        self.iface.messageBar().pushMessage(
            'iShareGIS Template Exporter : ',
            self.tr(message),
            level=level,
            duration=5
        )

        if log:
            log_level = QGis.Info
            if level == QGis.Warning:
                log_level = QGis.Warning
            if level == QGis.Critical:
                log_level = QGis.Critical

            if exception is not None:
                tb = traceback.format_exc()
                message = f"{message}\r\n{exception}\r\n{tb}"

            self.add_log_entry(message, level=log_level)

    # https://stackoverflow.com/questions/295135/turn-a-string-into-a-valid-filename
    def create_filename(self, value):
        """Creates a safe filename"""
        self.add_log_entry(type(value).__name__)
        value = unicodedata.normalize('NFKD', value).encode('utf-8', 'ignore').decode()
        value = re.sub(r'[^\w\s-]', '', str(value)).strip().lower()
        value = re.sub(r'[-\s]+', '-', value)
        return value

    # Open Folder Dialog
    # https://stackoverflow.com/questions/3941917/can-the-open-file-dialog-be-used-to-select-a-folder
    def select_save_directory(self):
        """Displays a folder browser dialog"""
        path = QFileDialog.getExistingDirectory(self.dlg, "Select output directory", "", QFileDialog.ShowDirsOnly)
        if path is not None and path != '':
            self.dlg.txtSaveDirectory.setText(path)

    def populate_template_list(self, list):
        """Populates the ComboBox with a list of templates"""
        list.clear()
        dirs = QgsApplication.layoutTemplatePaths()
        files = []
        for d in dirs:
            self.add_log_entry('Found directory: "{0}"'.format(d))
            files.extend([join(d, f) for f in listdir(d) if isfile(join(d, f)) and f.lower().endswith('.qpt')])

        for f in files:
            self.add_log_entry('Found file: "{0}"'.format(f))

            file_with_ext = os.path.basename(f)
            path = f.replace(file_with_ext, '')
            filename = os.path.splitext(file_with_ext)[0]
            filename = filename.replace('_', ' ').replace('-', ' ')

            list.addItem('{0} ({1})'.format(filename, path), userData = f)

    def run(self):
        """Run method that performs all the real work"""
        settings = QSettings()

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = iShareGISPrintTemplateExporterDialog()

            # set the inital values from the settings object
            self.add_log_entry("Setting text fields")
            self.add_log_entry(f"Setting URL: {settings.value('iShareGISPrintTemplateExporter/AstunServicesUrl')}")
            self.dlg.txtAstunServicesURL.setText(settings.value('iShareGISPrintTemplateExporter/AstunServicesUrl'))
            self.dlg.txtSaveDirectory.setText(settings.value('iShareGISPrintTemplateExporter/SaveDirectory'))
            self.dlg.txtAstunServicesUsername.setText(settings.value('iShareGISPrintTemplateExporter/Username'))
            self.dlg.txtAstunServicesPassword.setText(settings.value('iShareGISPrintTemplateExporter/Password'))

            # attach the click event to the browse button
            self.dlg.btnSaveDirectoryBrowse.clicked.connect(self.select_save_directory)

        # get the list of template directories
        self.populate_template_list(self.dlg.cmbTemplateName)

        # set Main to be the active tab
        self.dlg.tabTabs.setCurrentIndex(0)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result and self.dlg.txtAstunServicesURL.text().strip() == '':
            self.show_message('Astun Services URL has not been set. Please enter it in the settings tab', QGis.Critical, log=True)
        if result:
            # save the current settings
            settings.setValue("iShareGISPrintTemplateExporter/AstunServicesUrl", self.dlg.txtAstunServicesURL.text())
            settings.setValue("iShareGISPrintTemplateExporter/SaveDirectory", self.dlg.txtSaveDirectory.text())
            settings.setValue('iShareGISPrintTemplateExporter/Username', self.dlg.txtAstunServicesUsername.text())
            settings.setValue('iShareGISPrintTemplateExporter/Password', self.dlg.txtAstunServicesPassword.text())

            # get the filename stored in the itemData of the selected item
            path_absolute = self.dlg.cmbTemplateName.itemData(self.dlg.cmbTemplateName.currentIndex())

            # read the template in
            project_contents = None

            self.add_log_entry(f"Loading template file: {path_absolute}")
            try:
                if path_absolute:
                    with open(path_absolute, 'r', encoding='utf-8') as f:
                        project_contents = f.read()
            except Exception as e:
                self.show_message('Problem reading the composer file', level=QGis.Critical, log=True, exception=e)
                return

            self.add_log_entry(f"Template:\r\n{project_contents}")

            if project_contents:
                try:
                    url = settings.value("iShareGISPrintTemplateExporter/AstunServicesUrl")
                    template = self.dlg.cmbTemplateName.itemData(self.dlg.cmbTemplateName.currentIndex())
                    directory = self.dlg.txtSaveDirectory.text()
                    self.send_request(url, template, directory, project_contents)
                except Exception as e:
                    self.show_message('Problem sending the template for conversion', level=QGis.Critical, log=True, exception=e)
                    return
